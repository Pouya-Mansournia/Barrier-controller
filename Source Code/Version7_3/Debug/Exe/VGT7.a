;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 15-Apr-2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega64A
;Program type            : Application
;AVR Core Clock frequency: 14.745600 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include  <mega64a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include  <stdlib.h>
;#include  <delay.h>
;#include  <string.h>
;
;
;#define   Re1     PORTA.0            ///////////////// Relay FLASHER  ///////////////////
;#define   Re2     PORTA.1            ////////////////  UP   /////////////////////////////
;#define   Re3     PORTA.2            //////////////// COM   /////////////////////////////
;#define   Re4     PORTA.3            //////////////// Down //////////////////////////////
;#define   free1   PORTA.4            ////////////////////////////////////////////////////
;#define   free2   PORTA.5            ////////////////////////////////////////////////////
;#define   WRST    PORTA.6            ////////////////// Wifi Reset //////////////////////
;#define   LEDS1   PORTA.7            ////////////////   YELLOW LED //////////////////////
;
;#define   photo   PINF.7             /////////////////// PHOTO SESNRO ///////////////////
;#define   Mstop   PINF.2             /////////////////// Motor Stop  ////////////////////
;
;#define   DS1     PINC.0             /////////////// Dip Switch /////////////////////////
;#define   DS2     PINC.1
;#define   DS3     PINC.2
;#define   DS4     PINC.3
;#define   DS5     PINC.4
;#define   DS6     PINC.5             ////////////// Dip 6 = ETH /////////////////////////
;#define   LEDS2   PORTC.6            /////////////  RED LED /////////////////////////////
;#define   BUZZ    PORTC.7            ////////////////////////////////////////////////////
;
;#define   RF1     PINB.2             /////////////// Rf = Radio Frequntly ///////////////
;#define   RF2     PINB.3             //////////////// ALARM Button///////////////////////
;#define   RF3     PINB.4             //////////////// Silent Button//////////////////////
;#define   RF4     PINB.5             //////////////// Open Button////////////////////////
;#define   RF5     PINB.6             /////////////// Close Button////////////////////////
;#define   RF6     PINB.7             ////////////////////////////////////////////////////
;
;#define   SW1     PIND.0             /////////////// Switch1 ////////////////////////////
;#define   SW2     PIND.1             ////////////// Switch2 /////////////////////////////
;#define   SPB1    PIND.6             ///////////// Push Button 1 ////////////////////////
;#define   SPB2    PIND.7             ////////////  Push Button 2 ////////////////////////
;#define   SUP     PIND.4             //////////// Switch Up /////////////////////////////
;#define   SDW     PIND.5             //////////// Switch Down ///////////////////////////
;
;char E;
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 64
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0=0,rx_rd_index0=0;
;#else
;unsigned int rx_wr_index0=0,rx_rd_index0=0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;unsigned char rx_counter0=0;
;#else
;unsigned int rx_counter0=0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 005E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005F char status,data;
; 0000 0060 status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0061 data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0062 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0063    {
; 0000 0064    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0065 #if RX_BUFFER_SIZE0 == 256
; 0000 0066    // special case for receiver buffer size=256
; 0000 0067    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0068 #else
; 0000 0069    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 006A    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 006B       {
; 0000 006C       rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 006D       rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 006E       }
; 0000 006F #endif
; 0000 0070    }
;PCODE: $0000002A VOL: 0
; 0000 0071 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0078 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0079 char data;
; 0000 007A while (rx_counter0==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 007B data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 007C #if RX_BUFFER_SIZE0 != 256
; 0000 007D if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 007E #endif
; 0000 007F #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0080 --rx_counter0;
;PCODE: $00000044 VOL: 0
; 0000 0081 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0082 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0083 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 64
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0=0,tx_rd_index0=0;
;#else
;unsigned int tx_wr_index0=0,tx_rd_index0=0;
;#endif
;
;#if TX_BUFFER_SIZE0 < 256
;unsigned char tx_counter0=0;
;#else
;unsigned int tx_counter0=0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 0099 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 009A if (tx_counter0)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 009B    {
; 0000 009C    --tx_counter0;
;PCODE: $0000004F VOL: 0
; 0000 009D    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 009E #if TX_BUFFER_SIZE0 != 256
; 0000 009F    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00A0 #endif
; 0000 00A1    }
;PCODE: $0000005A VOL: 0
; 0000 00A2 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00A9 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00AA while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $00000061 VOL: 0
;	c -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00AB #asm("cli")
;PCODE: $00000068 VOL: 0
	cli
;PCODE: $00000069 VOL: 0
; 0000 00AC if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00AD    {
; 0000 00AE    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00AF #if TX_BUFFER_SIZE0 != 256
; 0000 00B0    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00B1 #endif
; 0000 00B2    ++tx_counter0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00B3    }
; 0000 00B4 else
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00B5    UDR0=c;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00B6 #asm("sei")
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
	sei
;PCODE: $00000083 VOL: 0
; 0000 00B7 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;#pragma used-
;#endif
;
;// USART1 Receiver buffer
;#define RX_BUFFER_SIZE1 64
;char rx_buffer1[RX_BUFFER_SIZE1];
;
;#if RX_BUFFER_SIZE1 <= 256
;unsigned char rx_wr_index1=0,rx_rd_index1=0;
;#else
;unsigned int rx_wr_index1=0,rx_rd_index1=0;
;#endif
;
;#if RX_BUFFER_SIZE1 < 256
;unsigned char rx_counter1=0;
;#else
;unsigned int rx_counter1=0;
;#endif
;
;// This flag is set on USART1 Receiver buffer overflow
;bit rx_buffer_overflow1;
;
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0000 00D0 {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00D1 char status,data;
; 0000 00D2 status=UCSR1A;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00D3 data=UDR1;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00D4 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00D5    {
; 0000 00D6    rx_buffer1[rx_wr_index1++]=data;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00D7 #if RX_BUFFER_SIZE1 == 256
; 0000 00D8    // special case for receiver buffer size=256
; 0000 00D9    if (++rx_counter1 == 0) rx_buffer_overflow1=1;
; 0000 00DA #else
; 0000 00DB    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00DC    if (++rx_counter1 == RX_BUFFER_SIZE1)
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00DD       {
; 0000 00DE       rx_counter1=0;
;PCODE: $000000A0 VOL: 0
; 0000 00DF       rx_buffer_overflow1=1;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00E0       }
; 0000 00E1 #endif
; 0000 00E2    }
;PCODE: $000000A4 VOL: 0
; 0000 00E3 }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;
;// Get a character from the USART1 Receiver buffer
;#pragma used+
;char getchar1(void)
; 0000 00E8 {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00E9 char data;
; 0000 00EA while (rx_counter1==0);
;PCODE: $000000AC VOL: 0
;	data -> R17
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00EB data=rx_buffer1[rx_rd_index1++];
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00EC #if RX_BUFFER_SIZE1 != 256
; 0000 00ED if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00EE #endif
; 0000 00EF #asm("cli")
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
	cli
;PCODE: $000000BD VOL: 0
; 0000 00F0 --rx_counter1;
;PCODE: $000000BE VOL: 0
; 0000 00F1 #asm("sei")
;PCODE: $000000BF VOL: 0
	sei
;PCODE: $000000C0 VOL: 0
; 0000 00F2 return data;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00F3 }
;PCODE: $000000C4 VOL: 0
;#pragma used-
;// USART1 Transmitter buffer
;#define TX_BUFFER_SIZE1 64
;char tx_buffer1[TX_BUFFER_SIZE1];
;
;#if TX_BUFFER_SIZE1 <= 256
;unsigned char tx_wr_index1=0,tx_rd_index1=0;
;#else
;unsigned int tx_wr_index1=0,tx_rd_index1=0;
;#endif
;
;#if TX_BUFFER_SIZE1 < 256
;unsigned char tx_counter1=0;
;#else
;unsigned int tx_counter1=0;
;#endif
;
;// USART1 Transmitter interrupt service routine
;interrupt [USART1_TXC] void usart1_tx_isr(void)
; 0000 0107 {
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0108 if (tx_counter1)
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0109    {
; 0000 010A    --tx_counter1;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 010B    UDR1=tx_buffer1[tx_rd_index1++];
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 010C #if TX_BUFFER_SIZE1 != 256
; 0000 010D    if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 010E #endif
; 0000 010F    }
;PCODE: $000000DA VOL: 0
; 0000 0110 }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;
;// Write a character to the USART1 Transmitter buffer
;#pragma used+
;void putchar1(char c)
; 0000 0115 {
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0116 while (tx_counter1 == TX_BUFFER_SIZE1);
;PCODE: $000000E1 VOL: 0
;	c -> Y+0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0117 #asm("cli")
;PCODE: $000000E8 VOL: 0
	cli
;PCODE: $000000E9 VOL: 0
; 0000 0118 if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0119    {
; 0000 011A    tx_buffer1[tx_wr_index1++]=c;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 011B #if TX_BUFFER_SIZE1 != 256
; 0000 011C    if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 011D #endif
; 0000 011E    ++tx_counter1;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 011F    }
; 0000 0120 else
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0121    UDR1=c;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0122 #asm("sei")
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
	sei
;PCODE: $00000109 VOL: 0
; 0000 0123 }
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;#pragma used-
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;unsigned int adc_data;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 012F {
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0130 // Read the AD conversion result
; 0000 0131 adc_data=ADCW;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0132 }
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;
;// Read the AD conversion result
;// with noise canceling
;unsigned int read_adc(unsigned char adc_input)
; 0000 0137 {
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0138 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000116 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0139 // Delay needed for the stabilization of the ADC input voltage
; 0000 013A delay_us(10);
;PCODE: $0000011A VOL: 0
; 0000 013B #asm
;PCODE: $0000011B VOL: 0
; 0000 013C     in   r30,mcucr
    in   r30,mcucr
;PCODE: $0000011C VOL: 0
; 0000 013D     cbr  r30,__sm_mask
    cbr  r30,__sm_mask
;PCODE: $0000011D VOL: 0
; 0000 013E     sbr  r30,__se_bit | __sm_adc_noise_red
    sbr  r30,__se_bit | __sm_adc_noise_red
;PCODE: $0000011E VOL: 0
; 0000 013F     out  mcucr,r30
    out  mcucr,r30
;PCODE: $0000011F VOL: 0
; 0000 0140     sleep
    sleep
;PCODE: $00000120 VOL: 0
; 0000 0141     cbr  r30,__se_bit
    cbr  r30,__se_bit
;PCODE: $00000121 VOL: 0
; 0000 0142     out  mcucr,r30
    out  mcucr,r30
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0143 #endasm
; 0000 0144 return adc_data;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0145 }
;PCODE: $00000127 VOL: 0
;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// ...
;void motorright() // Close
; 0000 0148 {
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0149     if (RF3==1 || SPB1==1)
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 014A     {
; 0000 014B             while(1)
;PCODE: $00000132 VOL: 0
; 0000 014C             {
; 0000 014D             Re2=1;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 014E             Re1=1;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 014F                         if (Mstop == 1 || RF2 == 1)
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0150                         {
; 0000 0151                         Re2=0;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0152                         Re3=0;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0153                         Re4=0;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0154                         Re1=0;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0155                         delay_ms(10);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0156                         break;
;PCODE: $0000014A VOL: 0
; 0000 0157                         }
; 0000 0158                         if (SUP==1)
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0159                         {
; 0000 015A                         Re2=0;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 015B                         Re1=0;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 015C                         delay_ms(10);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 015D                         break;
;PCODE: $00000156 VOL: 0
; 0000 015E                         }
; 0000 015F                         if (photo==1)
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0160                         {
; 0000 0161                             Re1=0;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0162                             Re2=0;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0163                             delay_ms(2000);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0164                             if (DS1==1)
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0165                             {
; 0000 0166                                 while(1)
;PCODE: $00000164 VOL: 0
; 0000 0167                                 {
; 0000 0168                                 Re4=1;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0169                                 delay_ms(10);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 016A                                 Re1=1;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 016B                                 delay_ms(10);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 016C                                     if (Mstop == 1 || RF2 == 1)
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 016D                                     {
; 0000 016E                                     Re2=0;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 016F                                     Re3=0;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0170                                     Re4=0;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0171                                     Re1=0;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0172                                     delay_ms(10);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0173                                     break;
;PCODE: $00000182 VOL: 0
; 0000 0174                                     }
; 0000 0175                                     if (SDW==1)
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0176                                     {
; 0000 0177                                     Re4=0;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0178                                     delay_ms(10);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0179                                     Re1=0;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 017A                                     delay_ms(10);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 017B                                     Re2=0;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 017C                                     BUZZ=1;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 017D                                     delay_ms(3000);
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 017E                                     break;
;PCODE: $00000197 VOL: 0
; 0000 017F                                     }
; 0000 0180                                 }
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0181                             }
; 0000 0182                             else if (DS1==0)
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0183                             {
; 0000 0184                               while(1)
;PCODE: $000001A0 VOL: 0
; 0000 0185                               {
; 0000 0186                                 Re4=1;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0187                                 delay_ms(10);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0188                                 Re1=1;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0189                                 delay_ms(10);
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 018A                                 if (Mstop == 1 || RF2 == 1)
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 018B                                 {
; 0000 018C                                 Re2=0;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 018D                                 Re3=0;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 018E                                 Re4=0;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 018F                                 Re1=0;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0190                                 delay_ms(10);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0191                                 break;
;PCODE: $000001BE VOL: 0
; 0000 0192                                 }
; 0000 0193                                 if (SDW==1)
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0194                                 {
; 0000 0195                                 Re4=0;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0196                                 delay_ms(10);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0197                                 Re1=0;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0198                                 delay_ms(10);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0199                                 Re2=0;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 019A                                 BUZZ=1;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 019B                                 delay_ms(9500);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 019C                                     while(1)
;PCODE: $000001D3 VOL: 0
; 0000 019D                                     {
; 0000 019E                                         Re2=1;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 019F                                         Re1=1;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 01A0                                         if (Mstop == 1 || RF2 == 1)
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 01A1                                         {
; 0000 01A2                                         Re2=0;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 01A3                                         Re3=0;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 01A4                                         Re4=0;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 01A5                                         Re1=0;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 01A6                                         delay_ms(10);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 01A7                                         break;
;PCODE: $000001EB VOL: 0
; 0000 01A8                                         }
; 0000 01A9                                         if (SUP==1)
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 01AA                                         {
; 0000 01AB                                         Re2=0;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 01AC                                         Re1=0;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 01AD                                         delay_ms(10);
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 01AE                                         break;
;PCODE: $000001F7 VOL: 0
; 0000 01AF                                         }
; 0000 01B0 
; 0000 01B1                                     }
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 01B2                                 break;
;PCODE: $000001FB VOL: 0
; 0000 01B3                                 }
; 0000 01B4                               }
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 01B5 
; 0000 01B6                             break;
;PCODE: $000001FF VOL: 0
; 0000 01B7 
; 0000 01B8                             }
; 0000 01B9                         }
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 01BA             }
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 01BB     }
; 0000 01BC }
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;
;void motorleft() // Open
; 0000 01BF     {
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 01C0         if (RF4==1 || SPB2==1)
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 01C1         {
; 0000 01C2                 while(1)
;PCODE: $00000212 VOL: 0
; 0000 01C3                 {
; 0000 01C4                 Re4=1;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 01C5                 Re1=1;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 01C6                         if (Mstop == 1)
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 01C7                         {
; 0000 01C8                         Re2=0;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 01C9                         Re3=0;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 01CA                         Re4=0;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 01CB                         Re1=0;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 01CC                         delay_ms(10);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 01CD                         break;
;PCODE: $00000225 VOL: 0
; 0000 01CE                         }
; 0000 01CF                         if (SDW==1 || RF2==1)
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 01D0                         {
; 0000 01D1                         Re4=0;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 01D2                         Re1=0;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 01D3                         delay_ms(10);
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 01D4                         break;
;PCODE: $00000236 VOL: 0
; 0000 01D5                         }
; 0000 01D6                         else
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 01D7                         {
; 0000 01D8                         continue;
;PCODE: $00000239 VOL: 0
; 0000 01D9                         }
;PCODE: $0000023A VOL: 0
; 0000 01DA                 }
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 01DB         }
; 0000 01DC         else
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 01DD         {
; 0000 01DE         //Re4=0;
; 0000 01DF         //Re1=0;
; 0000 01E0         }
;PCODE: $0000023F VOL: 0
; 0000 01E1     }
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;
;void motor()
; 0000 01E4     {
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 01E5     motorright();
;PCODE: $00000244 VOL: 0
; 0000 01E6     motorleft();
;PCODE: $00000245 VOL: 0
; 0000 01E7     }
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;
;void TCP()
; 0000 01EA     {
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 01EB       E=getchar();
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 01EC       if(E == 'X')
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 01ED       {
; 0000 01EE        printf(
; 0000 01EF        "$%1d%1d%1d%1d%1d%1d,%1d%1d%1d%1d%1d%1d,%1d%1d,%1d%1d%1d%1d%1d%1d%1d%1d\n\r",
; 0000 01F0        PINC.0,PINC.1,PINC.2,PINC.3,PINC.4,PINC.5,PINB.1,
; 0000 01F1        PINB.2,PINB.3,PINB.4,PINB.5,PINB.6,PIND.0,PIND.1,PIND.6,PIND.7,PIND.4,PIND.5,PINF.7,PINF.2,PINF.5,PINF.6);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 01F2       }
; 0000 01F3       if( E == 'C' )
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 01F4       {
; 0000 01F5                 while(1)
;PCODE: $000002B2 VOL: 0
; 0000 01F6             {
; 0000 01F7             Re2=1;
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 01F8             Re1=1;
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 01F9                         if (Mstop == 1 || RF2 == 1)
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 01FA                         {
; 0000 01FB                         Re2=0;
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 01FC                         Re3=0;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01FD                         Re4=0;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 01FE                         Re1=0;
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 01FF                         delay_ms(10);
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0200                         break;
;PCODE: $000002CA VOL: 0
; 0000 0201                         }
; 0000 0202                         if (SUP==1)
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 0203                         {
; 0000 0204                         Re2=0;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 0205                         Re1=0;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0206                         delay_ms(10);
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0207                         break;
;PCODE: $000002D6 VOL: 0
; 0000 0208                         }
; 0000 0209                         if (photo==1)
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 020A                         {
; 0000 020B                             Re1=0;
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 020C                             Re2=0;
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 020D                             delay_ms(2000);
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 020E                             if (DS1==1)
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 020F                             {
; 0000 0210                                 while(1)
;PCODE: $000002E4 VOL: 0
; 0000 0211                                 {
; 0000 0212                                 Re4=1;
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 0213                                 delay_ms(10);
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0214                                 Re1=1;
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 0215                                 delay_ms(10);
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 0216                                     if (Mstop == 1 || RF2 == 1)
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0217                                     {
; 0000 0218                                     Re2=0;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 0219                                     Re3=0;
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 021A                                     Re4=0;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 021B                                     Re1=0;
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 021C                                     delay_ms(10);
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 021D                                     break;
;PCODE: $00000302 VOL: 0
; 0000 021E                                     }
; 0000 021F                                     if (SDW==1)
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 0220                                     {
; 0000 0221                                     Re4=0;
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 0222                                     delay_ms(10);
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0000 0223                                     Re1=0;
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 0224                                     delay_ms(10);
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 0225                                     Re2=0;
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 0226                                     BUZZ=1;
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 0227                                     delay_ms(3000);
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 0228                                     break;
;PCODE: $00000317 VOL: 0
; 0000 0229                                     }
; 0000 022A                                 }
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 022B                             }
; 0000 022C                             else if (DS1==0)
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 022D                             {
; 0000 022E                               while(1)
;PCODE: $00000320 VOL: 0
; 0000 022F                               {
; 0000 0230                                 Re4=1;
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 0231                                 delay_ms(10);
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 0232                                 Re1=1;
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 0233                                 delay_ms(10);
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 0234                                 if (Mstop == 1 || RF2 == 1)
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 0235                                 {
; 0000 0236                                 Re2=0;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 0237                                 Re3=0;
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 0238                                 Re4=0;
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 0239                                 Re1=0;
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 023A                                 delay_ms(10);
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 023B                                 break;
;PCODE: $0000033E VOL: 0
; 0000 023C                                 }
; 0000 023D                                 if (SDW==1)
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 023E                                 {
; 0000 023F                                 Re4=0;
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 0240                                 delay_ms(10);
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 0241                                 Re1=0;
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 0242                                 delay_ms(10);
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 0243                                 Re2=0;
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 0244                                 BUZZ=1;
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 0245                                 delay_ms(9500);
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0000 0246                                     while(1)
;PCODE: $00000353 VOL: 0
; 0000 0247                                     {
; 0000 0248                                         Re2=1;
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0000 0249                                         Re1=1;
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 024A                                         if (Mstop == 1 || RF2 == 1)
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
; 0000 024B                                         {
; 0000 024C                                         Re2=0;
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 024D                                         Re3=0;
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 024E                                         Re4=0;
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 024F                                         Re1=0;
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 0250                                         delay_ms(10);
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 0251                                         break;
;PCODE: $0000036B VOL: 0
; 0000 0252                                         }
; 0000 0253                                         if (SUP==1)
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0000 0254                                         {
; 0000 0255                                         Re2=0;
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 0256                                         Re1=0;
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 0257                                         delay_ms(10);
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 0258                                         break;
;PCODE: $00000377 VOL: 0
; 0000 0259                                         }
; 0000 025A 
; 0000 025B                                     }
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0000 025C                                 break;
;PCODE: $0000037B VOL: 0
; 0000 025D                                 }
; 0000 025E                               }
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 025F 
; 0000 0260                             break;
;PCODE: $0000037F VOL: 0
; 0000 0261 
; 0000 0262                             }
; 0000 0263                         }
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 0264             }
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0000 0265       }
; 0000 0266       else if( E == 'O' )
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0000 0267       {
; 0000 0268                 while(1)
;PCODE: $0000038A VOL: 0
; 0000 0269                 {
; 0000 026A                 Re4=1;
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 026B                 Re1=1;
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0000 026C                         if (Mstop == 1)
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 026D                         {
; 0000 026E                         Re2=0;
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 026F                         Re3=0;
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 0270                         Re4=0;
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 0271                         Re1=0;
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 0272                         delay_ms(10);
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 0273                         break;
;PCODE: $0000039D VOL: 0
; 0000 0274                         }
; 0000 0275                         if (SDW==1 || RF2==1)
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 0276                         {
; 0000 0277                         Re4=0;
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 0278                         Re1=0;
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 0279                         delay_ms(10);
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 027A                         break;
;PCODE: $000003AE VOL: 0
; 0000 027B                         }
; 0000 027C                         else
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 027D                         {
; 0000 027E                         continue;
;PCODE: $000003B1 VOL: 0
; 0000 027F                         }
;PCODE: $000003B2 VOL: 0
; 0000 0280                 }
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0000 0281         }
; 0000 0282 
; 0000 0283       else if(E == 'S' )
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 0284       {
; 0000 0285                 Re4=0;
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 0286                 Re1=0;
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 0287                 Re2=0;
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 0288       }
; 0000 0289       else if( E == 'A' )
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0000 028A       {
; 0000 028B       Re1 = (Re1 == 1)?0:1;
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0000 028C       }
; 0000 028D       else if( E == 'B' )
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 028E       {
; 0000 028F       Re2 = (Re2 == 1)?0:1;
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0000 0290       }
; 0000 0291       else if( E == 'D' )
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 0292       {
; 0000 0293       Re3 = (Re3 == 1)?0:1;
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 0294       }
; 0000 0295       else if( E == 'E' )
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
; 0000 0296       {
; 0000 0297       Re4 = (Re4 == 1)?0:1;
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
; 0000 0298       }
; 0000 0299       else if( E == 'F' )
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 029A       {
; 0000 029B       BUZZ = (BUZZ == 1)?0:1;
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 029C       }
; 0000 029D       else if( E == 'G' )
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
; 0000 029E       {
; 0000 029F       LEDS2 = (LEDS2 == 1)?0:1;
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0000 02A0       }
; 0000 02A1       else if( E == 'H' )
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 02A2       {
; 0000 02A3       LEDS1 = (LEDS1 == 1)?0:1;
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 02A4       }
; 0000 02A5     }
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;void Run()
; 0000 02A7     {
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
; 0000 02A8         LEDS1=!LEDS1; delay_ms(100);
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 02A9         LEDS2=!LEDS2; delay_ms(100);
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
; 0000 02AA         LEDS1=!LEDS1; delay_ms(100);
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
; 0000 02AB         LEDS2=!LEDS2; delay_ms(100);
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
; 0000 02AC         LEDS1=!LEDS1; delay_ms(100);
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 0000 02AD         LEDS2=!LEDS2; delay_ms(100);
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0000 02AE         LEDS1=!LEDS1; delay_ms(100);
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0000 02AF         LEDS2=!LEDS2; delay_ms(100);
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
; 0000 02B0         LEDS1=!LEDS1; delay_ms(100);
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 02B1         LEDS2=!LEDS2; delay_ms(100);
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
; 0000 02B2         LEDS1=!LEDS1; delay_ms(100);
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
; 0000 02B3         LEDS2=!LEDS2; delay_ms(100);
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0000 02B4         LEDS1=!LEDS1; delay_ms(100);
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
; 0000 02B5         LEDS2=!LEDS2; delay_ms(100);
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
; 0000 02B6         LEDS1=1;
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
; 0000 02B7         LEDS2=0;
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
; 0000 02B8         BUZZ=0;
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
; 0000 02B9         delay_ms(60);
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 0000 02BA         BUZZ=1;
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
; 0000 02BB         delay_ms(15);
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
; 0000 02BC     }
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;
;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// ...
;
;void main(void)
; 0000 02C1 {
;PCODE: $00000535 VOL: 0
; 0000 02C2 // Declare your local variables here
; 0000 02C3 
; 0000 02C4 // Input/Output Ports initialization
; 0000 02C5 // Port A initialization
; 0000 02C6 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 02C7 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
; 0000 02C8 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 02C9 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
; 0000 02CA 
; 0000 02CB // Port B initialization
; 0000 02CC // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 02CD DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 02CE // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 02CF PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
; 0000 02D0 
; 0000 02D1 // Port C initialization
; 0000 02D2 // Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 02D3 DDRC=(1<<DDC7) | (1<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
; 0000 02D4 // State: Bit7=1 Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 02D5 PORTC=(1<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
; 0000 02D6 
; 0000 02D7 // Port D initialization
; 0000 02D8 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 02D9 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
; 0000 02DA // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 02DB PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
; 0000 02DC 
; 0000 02DD // Port E initialization
; 0000 02DE // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 02DF DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
; 0000 02E0 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 02E1 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
; 0000 02E2 
; 0000 02E3 // Port F initialization
; 0000 02E4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 02E5 DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
; 0000 02E6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 02E7 PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
; 0000 02E8 
; 0000 02E9 // Port G initialization
; 0000 02EA // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 02EB DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 0000 02EC // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 02ED PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
; 0000 02EE 
; 0000 02EF // Timer/Counter 0 initialization
; 0000 02F0 // Clock source: System Clock
; 0000 02F1 // Clock value: Timer 0 Stopped
; 0000 02F2 // Mode: Normal top=0xFF
; 0000 02F3 // OC0 output: Disconnected
; 0000 02F4 ASSR=0<<AS0;
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0000 02F5 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
; 0000 02F6 TCNT0=0x00;
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
; 0000 02F7 OCR0=0x00;
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
; 0000 02F8 
; 0000 02F9 // Timer/Counter 1 initialization
; 0000 02FA // Clock source: System Clock
; 0000 02FB // Clock value: Timer1 Stopped
; 0000 02FC // Mode: Normal top=0xFFFF
; 0000 02FD // OC1A output: Disconnected
; 0000 02FE // OC1B output: Disconnected
; 0000 02FF // OC1C output: Disconnected
; 0000 0300 // Noise Canceler: Off
; 0000 0301 // Input Capture on Falling Edge
; 0000 0302 // Timer1 Overflow Interrupt: Off
; 0000 0303 // Input Capture Interrupt: Off
; 0000 0304 // Compare A Match Interrupt: Off
; 0000 0305 // Compare B Match Interrupt: Off
; 0000 0306 // Compare C Match Interrupt: Off
; 0000 0307 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
; 0000 0308 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
; 0000 0309 TCNT1H=0x00;
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
; 0000 030A TCNT1L=0x00;
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
; 0000 030B ICR1H=0x00;
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
; 0000 030C ICR1L=0x00;
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
; 0000 030D OCR1AH=0x00;
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
; 0000 030E OCR1AL=0x00;
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
; 0000 030F OCR1BH=0x00;
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
; 0000 0310 OCR1BL=0x00;
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
; 0000 0311 OCR1CH=0x00;
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
; 0000 0312 OCR1CL=0x00;
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
; 0000 0313 
; 0000 0314 // Timer/Counter 2 initialization
; 0000 0315 // Clock source: System Clock
; 0000 0316 // Clock value: Timer2 Stopped
; 0000 0317 // Mode: Normal top=0xFF
; 0000 0318 // OC2 output: Disconnected
; 0000 0319 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
; 0000 031A TCNT2=0x00;
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
; 0000 031B OCR2=0x00;
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
; 0000 031C 
; 0000 031D // Timer/Counter 3 initialization
; 0000 031E // Clock source: System Clock
; 0000 031F // Clock value: Timer3 Stopped
; 0000 0320 // Mode: Normal top=0xFFFF
; 0000 0321 // OC3A output: Disconnected
; 0000 0322 // OC3B output: Disconnected
; 0000 0323 // OC3C output: Disconnected
; 0000 0324 // Noise Canceler: Off
; 0000 0325 // Input Capture on Falling Edge
; 0000 0326 // Timer3 Overflow Interrupt: Off
; 0000 0327 // Input Capture Interrupt: Off
; 0000 0328 // Compare A Match Interrupt: Off
; 0000 0329 // Compare B Match Interrupt: Off
; 0000 032A // Compare C Match Interrupt: Off
; 0000 032B TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
; 0000 032C TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
; 0000 032D TCNT3H=0x00;
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
; 0000 032E TCNT3L=0x00;
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
; 0000 032F ICR3H=0x00;
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
; 0000 0330 ICR3L=0x00;
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
; 0000 0331 OCR3AH=0x00;
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
; 0000 0332 OCR3AL=0x00;
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
; 0000 0333 OCR3BH=0x00;
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0000 0334 OCR3BL=0x00;
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
; 0000 0335 OCR3CH=0x00;
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
; 0000 0336 OCR3CL=0x00;
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
; 0000 0337 
; 0000 0338 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0339 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
; 0000 033A ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
; 0000 033B 
; 0000 033C // External Interrupt(s) initialization
; 0000 033D // INT0: Off
; 0000 033E // INT1: Off
; 0000 033F // INT2: Off
; 0000 0340 // INT3: Off
; 0000 0341 // INT4: Off
; 0000 0342 // INT5: Off
; 0000 0343 // INT6: Off
; 0000 0344 // INT7: Off
; 0000 0345 EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
; 0000 0346 EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
; 0000 0347 EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
; 0000 0348 
; 0000 0349 // USART0 initialization
; 0000 034A // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 034B // USART0 Receiver: On
; 0000 034C // USART0 Transmitter: On
; 0000 034D // USART0 Mode: Asynchronous
; 0000 034E // USART0 Baud Rate: 115200
; 0000 034F UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
; 0000 0350 UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
; 0000 0351 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
; 0000 0352 UBRR0H=0x00;
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
; 0000 0353 UBRR0L=0x07;
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
; 0000 0354 
; 0000 0355 // USART1 initialization
; 0000 0356 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0357 // USART1 Receiver: On
; 0000 0358 // USART1 Transmitter: On
; 0000 0359 // USART1 Mode: Asynchronous
; 0000 035A // USART1 Baud Rate: 115200
; 0000 035B UCSR1A=(0<<RXC1) | (0<<TXC1) | (0<<UDRE1) | (0<<FE1) | (0<<DOR1) | (0<<UPE1) | (0<<U2X1) | (0<<MPCM1);
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 035C UCSR1B=(1<<RXCIE1) | (1<<TXCIE1) | (0<<UDRIE1) | (1<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
; 0000 035D UCSR1C=(0<<UMSEL1) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (0<<UCPOL1);
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
; 0000 035E UBRR1H=0x00;
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
; 0000 035F UBRR1L=0x07;
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
; 0000 0360 
; 0000 0361 // Analog Comparator initialization
; 0000 0362 // Analog Comparator: Off
; 0000 0363 // The Analog Comparator's positive input is
; 0000 0364 // connected to the AIN0 pin
; 0000 0365 // The Analog Comparator's negative input is
; 0000 0366 // connected to the AIN1 pin
; 0000 0367 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
; 0000 0368 
; 0000 0369 // ADC initialization
; 0000 036A // ADC Clock frequency: 921.600 kHz
; 0000 036B // ADC Voltage Reference: AVCC pin
; 0000 036C ADMUX=ADC_VREF_TYPE;
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
; 0000 036D ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
; 0000 036E SFIOR=(0<<ACME);
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
; 0000 036F 
; 0000 0370 // SPI initialization
; 0000 0371 // SPI disabled
; 0000 0372 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
; 0000 0373 
; 0000 0374 // TWI initialization
; 0000 0375 // TWI disabled
; 0000 0376 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
; 0000 0377 
; 0000 0378 // Global enable interrupts
; 0000 0379 #asm("sei")
;PCODE: $000005BA VOL: 0
	sei
;PCODE: $000005BB VOL: 0
; 0000 037A Run();
;PCODE: $000005BC VOL: 0
; 0000 037B while (1)
;PCODE: $000005BD VOL: 0
; 0000 037C       {
; 0000 037D         if ( DS6 == 0 )
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
; 0000 037E         {
; 0000 037F             if(rx_counter0 > 0)
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
; 0000 0380             {
; 0000 0381                 TCP();
;PCODE: $000005C4 VOL: 0
; 0000 0382                 motor();
;PCODE: $000005C5 VOL: 0
; 0000 0383             }
; 0000 0384             else if (rx_counter0==0)
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
; 0000 0385             {
; 0000 0386                 motor();
;PCODE: $000005CA VOL: 0
; 0000 0387             }
; 0000 0388         }
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
; 0000 0389         else if ( DS6 == 1 )
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
; 0000 038A         {
; 0000 038B         motor();
;PCODE: $000005D2 VOL: 0
; 0000 038C         }
; 0000 038D 
; 0000 038E         if ( DS3 == 0 )
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
; 0000 038F         {
; 0000 0390             if ( SW2==0)
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
; 0000 0391             {
; 0000 0392             LEDS2=1;
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
; 0000 0393             delay_ms(100);
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
; 0000 0394             LEDS2=0;
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
; 0000 0395             delay_ms(100);
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
; 0000 0396             }
; 0000 0397         }
;PCODE: $000005E5 VOL: 0
; 0000 0398         if ( DS2 == 0 )
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
; 0000 0399         {
; 0000 039A             if ( SW1==0)
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
; 0000 039B             {
; 0000 039C             BUZZ=0;
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
; 0000 039D             delay_ms(100);
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
; 0000 039E             BUZZ=1;
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
; 0000 039F             delay_ms(100);
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
; 0000 03A0             }
; 0000 03A1         }
;PCODE: $000005F7 VOL: 0
; 0000 03A2 
; 0000 03A3       }
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
; 0000 03A4 }
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
