;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/2/2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega64A
;Program type            : Application
;AVR Core Clock frequency: 14.742800 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega64a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <delay.h>
;
;
;#define     RE1     PORTC.4
;#define     RE2     PORTC.5
;#define     RE3     PORTC.6
;
;#define     BUZ     PORTC.3
;
;#define     LD1     PORTC.0
;#define     LD2     PORTC.1
;
;#define     IN1     PINA.5
;#define     IN2     PINA.4
;#define     IN3     PINA.3
;#define     IN4     PINA.2
;#define     IN5     PINA.1
;#define     IN6     PINA.0
;
;#define     RF1     PINB.7
;#define     RF2     PINB.6
;#define     RF3     PINB.5
;#define     RF4     PINB.4
;#define     RF5     PINB.3
;
;#define     DS1     PIND.0
;#define     DS2     PIND.1
;#define     DS3     PIND.4
;#define     DS4     PIND.5
;#define     DS5     PIND.6
;#define     DS6     PIND.7
;
;char E;
;
;// Declare your global variables here
;
;// External Interrupt 4 service routine
;interrupt [EXT_INT4] void ext_int4_isr(void)
; 0000 0040 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0041 // Place your code here
; 0000 0042 
; 0000 0043 }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 64
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0=0,rx_rd_index0=0;
;#else
;unsigned int rx_wr_index0=0,rx_rd_index0=0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;unsigned char rx_counter0=0;
;#else
;unsigned int rx_counter0=0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0060 {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0061 char status,data;
; 0000 0062 status=UCSR0A;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0063 data=UDR0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0064 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0065    {
; 0000 0066    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0067 #if RX_BUFFER_SIZE0 == 256
; 0000 0068    // special case for receiver buffer size=256
; 0000 0069    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 006A #else
; 0000 006B    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 006C    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 006D       {
; 0000 006E       rx_counter0=0;
;PCODE: $0000002B VOL: 0
; 0000 006F       rx_buffer_overflow0=1;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0070       }
; 0000 0071 #endif
; 0000 0072    }
;PCODE: $0000002F VOL: 0
; 0000 0073 }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 007A {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 007B char data;
; 0000 007C while (rx_counter0==0);
;PCODE: $00000037 VOL: 0
;	data -> R17
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 007D data=rx_buffer0[rx_rd_index0++];
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 007E #if RX_BUFFER_SIZE0 != 256
; 0000 007F if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0080 #endif
; 0000 0081 #asm("cli")
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
	cli
;PCODE: $00000048 VOL: 0
; 0000 0082 --rx_counter0;
;PCODE: $00000049 VOL: 0
; 0000 0083 #asm("sei")
;PCODE: $0000004A VOL: 0
	sei
;PCODE: $0000004B VOL: 0
; 0000 0084 return data;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0085 }
;PCODE: $0000004F VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 64
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0=0,tx_rd_index0=0;
;#else
;unsigned int tx_wr_index0=0,tx_rd_index0=0;
;#endif
;
;#if TX_BUFFER_SIZE0 < 256
;unsigned char tx_counter0=0;
;#else
;unsigned int tx_counter0=0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 009B {
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 009C if (tx_counter0)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 009D    {
; 0000 009E    --tx_counter0;
;PCODE: $00000054 VOL: 0
; 0000 009F    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00A0 #if TX_BUFFER_SIZE0 != 256
; 0000 00A1    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00A2 #endif
; 0000 00A3    }
;PCODE: $0000005F VOL: 0
; 0000 00A4 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00AB {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00AC while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $00000066 VOL: 0
;	c -> Y+0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00AD #asm("cli")
;PCODE: $0000006D VOL: 0
	cli
;PCODE: $0000006E VOL: 0
; 0000 00AE if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00AF    {
; 0000 00B0    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00B1 #if TX_BUFFER_SIZE0 != 256
; 0000 00B2    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00B3 #endif
; 0000 00B4    ++tx_counter0;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00B5    }
; 0000 00B6 else
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00B7    UDR0=c;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00B8 #asm("sei")
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
	sei
;PCODE: $00000088 VOL: 0
; 0000 00B9 }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;void TCP(void)
; 0000 00C2     {
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00C3       E=getchar();
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00C4       if(E == 'X')
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00C5       {
; 0000 00C6        printf(
; 0000 00C7        "$%1d%1d%1d%1d%1d,%1d%1d%1d%1d%1d%1d,%1d%1d%1d%1d%1d%1d.\n\r",
; 0000 00C8        PINB.7,PINB.6,PINB.5,PINB.4,PINB.3,PINA.5,PINA.4,
; 0000 00C9        PINA.3,PINA.2,PINA.1,PINA.0,PIND.0,PIND.1,PIND.4,PIND.5,PIND.6,PIND.7,PINF.7,PINF.2,PINF.5,PINF.6);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00CA       }
; 0000 00CB       else if(E == 'S' )
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00CC       {
; 0000 00CD                 RE1=0;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00CE                 RE2=0;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00CF                 RE3=0;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00D0       }
; 0000 00D1       else if( E == 'A' )
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00D2       {
; 0000 00D3       RE1 = (RE1 == 1)?0:1;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00D4       }
; 0000 00D5       else if( E == 'B' )
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00D6       {
; 0000 00D7       RE2 = (RE2 == 1)?0:1;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00D8       }
; 0000 00D9       else if( E == 'D' )
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00DA       {
; 0000 00DB       RE3 = (RE3 == 1)?0:1;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00DC       }
; 0000 00DD       else if( E == 'F' )
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00DE       {
; 0000 00DF       BUZ = (BUZ == 1)?0:1;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00E0       }
; 0000 00E1       else if( E == 'G' )
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00E2       {
; 0000 00E3       LD2 = (LD2 == 1)?0:1;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00E4       }
; 0000 00E5       else if( E == 'H' )
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00E6       {
; 0000 00E7       LD1 = (LD1 == 1)?0:1;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00E8       }
; 0000 00E9     }
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;
;    void Run()
; 0000 00EC     {
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00ED       LD1=!LD1; delay_ms(100);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00EE       LD2=!LD2; delay_ms(100);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00EF       BUZ=!BUZ; delay_ms(100);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00F0       RE1=!RE1; delay_ms(100);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00F1       RE2=!RE2; delay_ms(100);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 00F2       RE3=!RE3; delay_ms(100);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 00F3       BUZ=1;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00F4       LD1=0;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00F5       LD2=0;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00F6       delay_ms(80);
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 00F7       LD1=1;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00F8     }
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;
;void main(void)
; 0000 00FB {
;PCODE: $000001EA VOL: 0
; 0000 00FC // Declare your local variables here
; 0000 00FD 
; 0000 00FE // Input/Output Ports initialization
; 0000 00FF // Port A initialization
; 0000 0100 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0101 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0102 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0103 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0104 
; 0000 0105 // Port B initialization
; 0000 0106 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0107 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0108 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0109 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 010A 
; 0000 010B // Port C initialization
; 0000 010C // Function: Bit7=In Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=Out Bit0=Out
; 0000 010D DDRC=(0<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 010E // State: Bit7=T Bit6=0 Bit5=0 Bit4=0 Bit3=1 Bit2=T Bit1=0 Bit0=0
; 0000 010F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (1<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0110 
; 0000 0111 // Port D initialization
; 0000 0112 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0113 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0114 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0115 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0116 
; 0000 0117 // Port E initialization
; 0000 0118 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0119 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 011A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 011B PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 011C 
; 0000 011D // Port F initialization
; 0000 011E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 011F DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0120 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0121 PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0122 
; 0000 0123 // Port G initialization
; 0000 0124 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0125 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0126 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0127 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0128 
; 0000 0129 // Timer/Counter 0 initialization
; 0000 012A // Clock source: System Clock
; 0000 012B // Clock value: Timer 0 Stopped
; 0000 012C // Mode: Normal top=0xFF
; 0000 012D // OC0 output: Disconnected
; 0000 012E ASSR=0<<AS0;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 012F TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0130 TCNT0=0x00;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0131 OCR0=0x00;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0132 
; 0000 0133 // Timer/Counter 1 initialization
; 0000 0134 // Clock source: System Clock
; 0000 0135 // Clock value: Timer1 Stopped
; 0000 0136 // Mode: Normal top=0xFFFF
; 0000 0137 // OC1A output: Disconnected
; 0000 0138 // OC1B output: Disconnected
; 0000 0139 // OC1C output: Disconnected
; 0000 013A // Noise Canceler: Off
; 0000 013B // Input Capture on Falling Edge
; 0000 013C // Timer1 Overflow Interrupt: Off
; 0000 013D // Input Capture Interrupt: Off
; 0000 013E // Compare A Match Interrupt: Off
; 0000 013F // Compare B Match Interrupt: Off
; 0000 0140 // Compare C Match Interrupt: Off
; 0000 0141 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0142 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0143 TCNT1H=0x00;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0144 TCNT1L=0x00;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0145 ICR1H=0x00;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0146 ICR1L=0x00;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0147 OCR1AH=0x00;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0148 OCR1AL=0x00;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0149 OCR1BH=0x00;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 014A OCR1BL=0x00;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 014B OCR1CH=0x00;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 014C OCR1CL=0x00;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 014D 
; 0000 014E // Timer/Counter 2 initialization
; 0000 014F // Clock source: System Clock
; 0000 0150 // Clock value: Timer2 Stopped
; 0000 0151 // Mode: Normal top=0xFF
; 0000 0152 // OC2 output: Disconnected
; 0000 0153 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0154 TCNT2=0x00;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0155 OCR2=0x00;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 0156 
; 0000 0157 // Timer/Counter 3 initialization
; 0000 0158 // Clock source: System Clock
; 0000 0159 // Clock value: Timer3 Stopped
; 0000 015A // Mode: Normal top=0xFFFF
; 0000 015B // OC3A output: Disconnected
; 0000 015C // OC3B output: Disconnected
; 0000 015D // OC3C output: Disconnected
; 0000 015E // Noise Canceler: Off
; 0000 015F // Input Capture on Falling Edge
; 0000 0160 // Timer3 Overflow Interrupt: Off
; 0000 0161 // Input Capture Interrupt: Off
; 0000 0162 // Compare A Match Interrupt: Off
; 0000 0163 // Compare B Match Interrupt: Off
; 0000 0164 // Compare C Match Interrupt: Off
; 0000 0165 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0166 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0167 TCNT3H=0x00;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0168 TCNT3L=0x00;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0169 ICR3H=0x00;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 016A ICR3L=0x00;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 016B OCR3AH=0x00;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 016C OCR3AL=0x00;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 016D OCR3BH=0x00;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 016E OCR3BL=0x00;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 016F OCR3CH=0x00;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0170 OCR3CL=0x00;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 0171 
; 0000 0172 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0173 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 0174 ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 0175 
; 0000 0176 // External Interrupt(s) initialization
; 0000 0177 // INT0: Off
; 0000 0178 // INT1: Off
; 0000 0179 // INT2: Off
; 0000 017A // INT3: Off
; 0000 017B // INT4: On
; 0000 017C // INT4 Mode: Any change
; 0000 017D // INT5: Off
; 0000 017E // INT6: Off
; 0000 017F // INT7: Off
; 0000 0180 EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 0181 EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (1<<ISC40);
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0182 EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (1<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0183 EIFR=(0<<INTF7) | (0<<INTF6) | (0<<INTF5) | (1<<INTF4) | (0<<INTF3) | (0<<INTF2) | (0<<INTF1) | (0<<INTF0);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 0184 
; 0000 0185 // USART0 initialization
; 0000 0186 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0187 // USART0 Receiver: On
; 0000 0188 // USART0 Transmitter: On
; 0000 0189 // USART0 Mode: Asynchronous
; 0000 018A // USART0 Baud Rate: 115200
; 0000 018B UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 018C UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 018D UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 018E UBRR0H=0x00;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 018F UBRR0L=0x07;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0190 
; 0000 0191 // USART1 initialization
; 0000 0192 // USART1 disabled
; 0000 0193 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 0194 
; 0000 0195 // Analog Comparator initialization
; 0000 0196 // Analog Comparator: Off
; 0000 0197 // The Analog Comparator's positive input is
; 0000 0198 // connected to the AIN0 pin
; 0000 0199 // The Analog Comparator's negative input is
; 0000 019A // connected to the AIN1 pin
; 0000 019B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 019C SFIOR=(0<<ACME);
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 019D 
; 0000 019E // ADC initialization
; 0000 019F // ADC disabled
; 0000 01A0 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 01A1 
; 0000 01A2 // SPI initialization
; 0000 01A3 // SPI disabled
; 0000 01A4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 01A5 
; 0000 01A6 // TWI initialization
; 0000 01A7 // TWI disabled
; 0000 01A8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 01A9 
; 0000 01AA // Global enable interrupts
; 0000 01AB #asm("sei")
;PCODE: $00000267 VOL: 0
	sei
;PCODE: $00000268 VOL: 0
; 0000 01AC 
; 0000 01AD Run();
;PCODE: $00000269 VOL: 0
; 0000 01AE 
; 0000 01AF while (1)
;PCODE: $0000026A VOL: 0
; 0000 01B0       {
; 0000 01B1         if ( DS6 == 0 )
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 01B2         {
; 0000 01B3             if(rx_counter0 > 0)
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 01B4             {
; 0000 01B5                 TCP();
;PCODE: $00000271 VOL: 0
; 0000 01B6                 //motorright();
; 0000 01B7                 //motorleft();
; 0000 01B8             }
; 0000 01B9             else if (rx_counter0==0)
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 01BA             {
; 0000 01BB                 //motorright();
; 0000 01BC                 //motorleft();
; 0000 01BD             }
; 0000 01BE         }
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 01BF         else if ( DS6 == 1 )
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 01C0         {
; 0000 01C1             //motorright();
; 0000 01C2             //motorleft();
; 0000 01C3         }
; 0000 01C4       }
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 01C5 }
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
